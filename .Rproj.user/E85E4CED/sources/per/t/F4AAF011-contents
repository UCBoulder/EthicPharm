################################################################################
# Title: raw_data_cleaning.R

# Description:
# Loads, cleans and exports data to be used in pharmflush.R script, which runs
# the PharmFlush model. Data sources include Medical Expenditure Panel Survey
# 2020 Prescribed Medicines File, CompTox, FDA Established Pharmacologic Class
# Text Phrase Listing 2023 (previous years are consulted for the latter when
# 2023 listing was missing data.)

# Functions used: 
#     * remove_drugs():
#       * Input: the full list of drugs and the list of drugs that need to be
#                removed
#       * Output: the truncated drug list

#     * fix_drug_coding():
#       * Input: dataframe, column, column name, incorrect column entry, and
#                correct column entry
#       * Output: dataframe with correct entry in row/column of interest

#     * remove_entries(): 
#       * Input: dataframe, column, incorrect column entry
#       * Output: dataframe with row with incorrect entry removed

################################################################################

# setwd("C:/Users/vgmay/research/CMBMGEM/cmbmgem/EthicPharm/EthicPharm")

# install packages and load libraries
library("stringdist")
library("data.table")
library('dplyr')
library("readxl")
library("stringr")
library("tidyr")
library("purrr")

# load functions library
source("raw_data_cleaning_functions.R")

################################################################################
# Load and clean Medical Expenditure Panel Survey (MEPS) 2020 data.
################################################################################

# load MEPS dataset (all columns read in as characters)
meps = read.delim("MEPS_data_2020.txt", header=TRUE, sep = "\t",
                  colClasses = "character", dec = ".")

# extract desired data columns
meps = meps %>%
  select(RXDRGNAM:RXDAYSUP)

# remove RXFRMUNT (not used)
meps = subset(meps, select = -c(RXFRMUNT))

# update to clearer column names
colnames(meps) = c("Drug", "NDC", "Quantity", "Form", "Strength", "Units",
                   "Day_Supply")

# replace missing values (-15, -8, and -7 in original data) with NA
meps = meps %>%
  mutate(across(colnames(meps), ~ case_when(. =="-15" ~ NA,
                                            . =="-8" ~ NA,
                                            . == "-7" ~ NA,
                                            .default = .)))

# remove whitespace around entries
meps = meps %>%
  mutate(across(everything(), ~trimws(.)))

# remove ophthalmic, otic, and nasal labels from drug names (this prevents
# different forms of the same drug from being counted twice)
# \\b is used to match the word boundaries to ensure that only the exact word is
# removed
meps$Drug = gsub(paste0("\\b", "OPHTHALMIC", "\\b"), "", meps$Drug,
                 ignore.case = TRUE)
meps$Drug = gsub(paste0("\\b", "OTIC", "\\b"), "", meps$Drug,
                 ignore.case = TRUE)
meps$Drug = gsub(paste0("\\b", "NASAL", "\\b"), "", meps$Drug,
                 ignore.case = TRUE)

# group and remove topical drug forms
# TODO: will need to check for others in any new datasets
topical_forms = c("CREA", "OINT", "OIN", "LOTN", "LOT", "SWAB", "CRE", "PSTE",
                   "PAS", "GEL", "SHAM")
for (form in topical_forms){
  meps = remove_entries(meps, meps$Form, form)
}

# group and remove commonly miscoded drug units
# TODO: will need to check for others in any new dataset
miscoded_units = c("OTHER", "U/ML", "U/ML/U/ML", "UNIT", "UNIT/ML", "UNIT/GM",
                   "U/GM", "UT/ML", "MCG/OTHER", "%/OTHER")
for (unit in miscoded_units){
  meps = remove_entries(meps, meps$Units, unit)
}

# fix miscoded drugs
# TODO: update to new dataset, this will be dataset-specific

# remove dashes from Form column (to avoid confusing special characters):
fix_forms_df = data.frame(miscoded_forms = c("CAP-Capsule", "INH-Inhaler",
                                         "INH-Inhalant"),
                      correct_forms = c("Capsule", "Inhaler", "Inhaler"))
for (i in seq_len(nrow(fix_forms_df))){
    meps = fix_drug_coding(meps, meps$Form, "Form", fix_forms_df[i,1],
                           fix_forms_df[i,2])
}

# fix miscoded units for combination drugs
# TODO: when adding other datasets, just set right away to all same units
meps = meps %>%
  mutate(Units = case_when((grepl("/", Drug)==TRUE | grepl("-", Drug)==TRUE)
                           & Units=="MG" ~ "MG/MG",
                              .default = Units))
meps = meps %>%
  mutate(Units = case_when((grepl("-", Drug)==TRUE | grepl("/", Drug)==TRUE)
                           & Units=="MCG" ~ "MCG/MCG",
                              .default = Units))
meps = meps %>%
  mutate(Units = case_when((grepl("-", Drug)==TRUE | grepl("/", Drug)==TRUE)
                           & Units=="MG" ~ "MG/MG",
                              .default = Units))
meps = meps %>%
  mutate(Units = case_when((grepl("-", Drug)==TRUE | grepl("/", Drug)==TRUE)
                           & Units=="%" ~ "%/%",
                              .default = Units))
meps = meps %>%
  mutate(Units = case_when((grepl("/", Drug)==TRUE | grepl("-", Drug)==TRUE)
                            & Units=="ML" ~ "ML/ML/ML",
                              .default = Units))
meps = meps %>% 
  mutate(Strength = case_when(NDC=="53002090672" ~ "3.5/10000/1",
                              .default = Strength)) %>%
  mutate(Units = case_when(NDC=="53002090672" ~ "ML/ML/ML",
                           .default = Units))
# TODO: in other datasets, try to avoid using NDC to fix units and strength

# remove unnecessary info from units and/or fix spelling/punctuation to be
# standard across all entries
fix_units_df = data.frame(miscoded_units = c("MCG/INH", "MG/ACT", "MCG/mg/Act",
                                         "MG/GM", "mg/Act", "GM/SCOOP",
                                         "MG/mg/Act", "MCG/BLIST","MCG/SPRAY",
                                         "MG/SPRAY", "MCG/ACT", "GM", "GM/ML"),
                      correct_units = c("MCG", "MG", "MCG/MG", "MG/G", "MG",
                                        "G","MG/MG", "MCG", "MCG", "MG", "MCG",
                                        "G", "G/ML"))
for (i in seq_len(nrow(temp_df2))){
  meps = fix_drug_coding(meps, meps$Units, "Units", fix_units_df[i,1],
                         fix_units_df[i,2])
}

# remove unnecessary commas from strength
meps$Strength = gsub(",", "", meps$Strength)

# remove miscoded drugs or drugs with vague/missing info
meps = meps[is.na(meps$Units)==FALSE,]
meps = remove_entries(meps, meps$Drug, "CODEINE/GUAIFENESIN")
meps = remove_entries(meps, meps$Drug, "CODEINE-GUAIFENESIN")
meps = remove_entries(meps, meps$Form, "OTHER")

# fix cases with miscoded strengths
meps = meps %>%
  mutate(Strength = case_when(Strength=="160-4.5/1" ~ "160-4.5",
                              .default=Strength))
meps = meps %>%
   mutate(Strength = case_when(Strength=="1.25/1.25/1.25/1.25" ~ "1.25/1.25",
                               .default=Strength))
meps = meps %>%
  mutate(Strength = case_when(Strength=="70/1/30/1" ~ "70/30",
                              .default=Strength))

# fix miscoded albuterol (108 mcg albuterol sulfate = 90 mcg albuterol)
meps = meps %>%
  mutate(Strength = case_when(Drug=="ALBUTEROL" & Strength=="108/1" ~ "90",
                              Drug=="ALBUTEROL" & Strength=="108" ~ "90",
                              .default=Strength))

# remove miscoded albuterol (2 entries)
meps = meps %>%
  filter(!(Drug=="ALBUTEROL" & Units == "ML"))

# fix albuterol units
meps = meps %>%
  mutate(Units = case_when(Drug == "ALBUTEROL" & Units=="MCG/MG" ~ "MCG",
                              .default=Units))
meps = meps %>%
  mutate(Units = case_when(Drug == "ALBUTEROL" & Strength=="0.09/1" ~ "MG",
                              .default=Units))
meps = meps %>% 
  mutate(Units = case_when(Drug=="ALBUTEROL" & Strength=="90" ~ "MCG",
                              .default=Units))

# Separate combination drugs (and find ones that are miscoded as combination
# drugs)

# fix mismatches between slashes and dashes across Drug, Strength, Units columns
# (that is, make it either all slashes or all dashes)
meps = meps %>%
  mutate(Strength = case_when(grepl("-", Drug)==TRUE &
                                grepl("/", Strength) == TRUE ~
                                str_replace_all(Strength, "/", "-"),
                              .default = Strength))

meps = meps %>%
  mutate(Units = case_when(grepl("-", Drug)==TRUE & grepl("/", Units) == TRUE ~
                                str_replace_all(Units, "/", "-"),
                              .default = Units))

meps = meps %>%
  mutate(Strength = case_when(grepl("/", Drug)==TRUE &
                                grepl("-", Strength) == TRUE ~
                             str_replace_all(Strength, "-", "/"),
                           .default = Strength))

# fix drugs miscoded as combination drugs in Strength and Units column

# fix cases where strengths have dashes
meps = meps %>%
  mutate(Strength = case_when(grepl("-", Drug)==FALSE & grepl("/", Drug)==FALSE
                              & grepl("-", Strength) == TRUE ~
                                str_replace(Strength, "-", "@"),
                              .default = Strength))

# fix cases where strengths have slashes
meps = meps %>%
  mutate(Strength = case_when(grepl("-", Drug)==FALSE & grepl("/", Drug)==FALSE
                              & grepl("/", Strength) == TRUE ~
                                str_replace(Strength, "/", "@"),
                              .default = Strength))

# fix cases where units have slashes
meps = meps %>%
  mutate(Units = case_when(grepl("-", Drug)==FALSE & grepl("/", Drug)==FALSE
                               & Units != "MCG/HR" & Units != "MG/HR"
                               & grepl("/", Units) == TRUE ~
                                str_replace(Units, "/", "@"),
                              .default = Units))

# separate the combination drugs with dash delimiters
meps = meps %>%
  separate_longer_delim(c(Drug, Strength, Units), delim="-")

# separate the combination drugs with slash delimiters
meps = meps %>%
  separate_longer_delim(c(Drug, Strength, Units), delim="/")

# get correct values for strengths and units for miscoded combo drugs

# first, assign @'s to rows without them to perform operation on whole column
meps = meps %>%
  mutate(Strength = case_when(grepl("@",Strength)==FALSE ~
                                paste0(Strength, "@1"),
                              .default=Strength))
meps = meps %>%
  mutate(Units = case_when(grepl("@",Units)==FALSE ~
                                paste0(Units, "@1"),
                              .default=Units))

# then convert strength to character temporarily to perform separation
meps = meps %>%
  mutate(Strength = as.character(Strength))

# then separate 1st and 2nd numbers in Strength and Units to extract 1st value
meps = meps %>%
  separate_wider_delim(Strength, delim="@", names=c("temp_strength_1",
                                                    "temp_strength_2"))
meps = meps %>%
  separate_wider_delim(Units, delim="@", names=c("temp_units_1",
                                                 "temp_units_2"))
# remove extra periods in strength columns
meps$temp_strength_1 <- sub("\\.$", "", meps$temp_strength_1)
meps$temp_strength_2 <- sub("\\.$", "", meps$temp_strength_2)

# convert strengths back to numbers and extract first values 
meps = meps %>%
  mutate(Strength=as.numeric(temp_strength_1))

# extract first values for units too
meps = meps %>%
  mutate(Units=temp_units_1)

# remove extraneous columns and move Strength/Units to original positions
meps = subset(meps, select=-c(temp_strength_1, temp_strength_2, temp_units_1,
                              temp_units_2))
meps = meps %>%
  relocate(c(Strength, Units), .before=Day_Supply)

# fix miscoded drugs that were previously stuck in combinations
# correct miscoded solution drugs (prescribed as % solutions)
meps = meps %>%
  mutate(Strength = case_when(Drug=="TRAVOPROST" & Units=="ML" ~
                                0.004,
                              Drug=="CIPROFLOXACIN" & Units=="ML" ~
                                0.3,
                              Drug=="NEOMYCIN" ~
                                0.35, 
                              .default=Strength))
meps = meps %>%
  mutate(Units = case_when(Units == "ML" ~ "%",
                           .default=Units))

# Generate drug list to loop through  

# get list of all drugs listed in Drug column
drugs = unique(meps$Drug)

# remove missing drug names from drug list
drugs = na.omit(drugs)

# remove any reintroduced whitespace from drugs vector
drugs = trimws(drugs)

# remove vitamins, minerals, compounds from food, etc
food_drugs = unlist(as.list(read_excel("drugs_to_remove.xlsx", sheet=1,
                                       col_names=FALSE)))
drugs = remove_drugs(drugs, food_drugs)

# remove hormones and other naturally occurring compounds in the body too
inbody_drugs = unlist(as.list(read_excel("drugs_to_remove.xlsx", sheet=2,
                                         col_names=FALSE)))
drugs = remove_drugs(drugs, inbody_drugs)

# Quarantine to check if synthetic distinguishable from natural:
synthetic_drugs = unlist(as.list(read_excel("drugs_to_remove.xlsx", sheet=3,
                                            col_names=FALSE)))
drugs = remove_drugs(drugs, synthetic_drugs)

# remove vague names
vague_drugs = unlist(as.list(read_excel("drugs_to_remove.xlsx", sheet=4,
                                        col_names=FALSE)))
drugs = remove_drugs(drugs, vague_drugs)

# remove pharmaceuticals missing from / insufficient data from Comptox
no_comptox = unlist(as.list(read_excel("drugs_to_remove.xlsx", sheet=5,
                                       col_names=FALSE)))
drugs = remove_drugs(drugs, no_comptox)
# TODO: check if these drugs should actually be included still

# remove topicals based on name
# TODO: add topicals back in at some point with assumption
for (drug in drugs){
  if (grepl("TOPICAL", drug)==TRUE){
    drugs = remove_drugs(drugs, drug)
  }
}

# remove any duplicates introduced
drugs = unique(drugs)

# initialize larger data frame to store cleaned data
meps_clean = vector("list", length = length(drugs))

# loop through drug list to complete data cleaning on MEPS dataset
for (i in 1:length(drugs)){
  drug_data = meps %>%
    filter(Drug==drugs[i])
  
  # Find avg Day_Supply and Quantity values for each drug (to be used for
  # imputing)
  not_missing_daysup = drug_data[is.na(drug_data$Day_Supply)==FALSE,]
  avg_daysup = sum(as.numeric(not_missing_daysup$Day_Supply))/
    length(not_missing_daysup$Day_Supply)
  not_missing_quanty = drug_data[is.na(drug_data$Quantity)==FALSE,]
  avg_quanty = sum(as.numeric(not_missing_quanty$Quantity))/
    length(not_missing_quanty$Quantity)
  
  # remove entries where strength is missing (only 1 entry left after
  # processing)
  drug_data = subset(drug_data, is.na(drug_data$Strength)==FALSE)

  # remove entries where Day_Supply missing for >95% of entries (imputing not
  # reliable in this case)
   if (sum(is.na(drug_data$Day_Supply)==TRUE) > 0.95*dim(drug_data)[1]){
     drug_data = subset(drug_data, is.na(drug_data$Day_Supply)==FALSE)
   }
   else {
    drug_data = drug_data %>%
      mutate(Day_Supply = case_when(is.na(Day_Supply)==TRUE ~ avg_daysup,
                                  .default=as.numeric(Day_Supply)))
   }

  # remove drugs where Quantity missing for >95% of entries (imputing not
  # reliable)
   if (sum(is.na(drug_data$Quantity)==TRUE) > 0.95*dim(drug_data)[1]){
     drug_data = subset(drug_data, is.na(drug_data$Quantity)==FALSE)
   }
   else {
    drug_data = drug_data %>%
      mutate(Quantity = case_when(is.na(Quantity)==TRUE ~ avg_quanty,
                                  .default=as.numeric(Quantity)))
   }
  
  # convert strength, Day_Supply, quantity to correct data type
  drug_data = drug_data %>%
    mutate(Day_Supply = as.numeric(Day_Supply)) %>%
    mutate(Quantity = as.numeric(Quantity)) %>%
    mutate(Strength = as.numeric(Strength))

  # Conversions to correct units in Strength column
  
  # convert MG to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units == "MG" ~ Strength*1000,
                                .default=Strength))

  # convert MG/ML to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units == "MG/ML" ~ Strength*1000,
                                .default=Strength))

  # convert MCG/HR to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units=="MCG/HR" ~ Strength*24,
                                .default=Strength))

  # Convert % to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units == "%" ~ Strength*1000000,
                                .default=Strength))

  # Convert G/ML to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units == "G/ML" ~ Strength*1000000,
                                .default=Strength))

  # Convert G to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units=="G" ~ Strength*1000000,
                                .default=Strength))

  # Convert MG/24HR to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units=="MG/24HR" ~ Strength*1000,
                                .default=Strength))

  # Convert MG/HR to MCG
  drug_data = drug_data %>%
    mutate(Strength = case_when(Units=="MG/HR" ~ Strength*24*1000,
                                .default=Strength))
  
  # change all remaining units to MCG (everything is in MCG now, MCG is
  # micrograms or ug)
  drug_data = drug_data %>%
    mutate(Units = "MCG")

  # add cleaned data for each drug to its own data frame
  meps_clean[[i]] = drug_data
}

# bind each data frame for each drug into giant data frame
meps_clean = do.call(rbind, meps_clean)

# remove Units (all same units now)
meps_clean = subset(meps_clean, select=-c(Units))

# calculate daily frequency
# (except the patches! these are already calculated as rates)
meps_clean = meps_clean %>%
  mutate(Daily_Frequency = case_when(Form != "PTWK" & Form != "PT24" ~
                                       Quantity/Day_Supply,
                               Form == "PTWK" ~ 1,
                               Form == "PT24" ~ 1))

# calculate daily dosage (Strength is mass of active ingredient)
meps_clean = meps_clean %>%
  mutate(Daily_Dosage = Strength*Daily_Frequency)

# find sum for each drug and put into descending order of prescribed daily dose
# (ug/day)
total_daily_dosages = aggregate(meps_clean$Daily_Dosage,list(meps_clean$Drug),
                                FUN=sum)
colnames(total_daily_dosages) = c("Pharmaceutical",
                                  "Prescribed_Daily_Dosage")
total_daily_dosages = total_daily_dosages %>%
  arrange(desc(Prescribed_Daily_Dosage))

# find total number of prescriptions per drug and put into descending order
total_prescribed = meps_clean %>%
  count(Drug) %>%
  arrange(desc(n))
colnames(total_prescribed) = c("Pharmaceutical", "Num_Prescriptions")

################################################################################
# Load and process FDA EPC 2023 classes data.
################################################################################

# load FDA classes dataset
classes = read_excel("drug_classes_2023.xlsx", col_names=c("Drug_Name", "Drug_Class"))

# remove unneeded rows
classes = classes[-c(1,2,3),]

# remove whitespace around entries
classes = classes %>%
  mutate(across(everything(), ~trimws(.)))

# make all drug names uppercase to match format in MEPS data
classes = classes %>%
  mutate(Drug_Name = toupper(Drug_Name))

# make all drug classes lowercase for consistency
classes = classes %>%
  mutate(Drug_Class = tolower(Drug_Class))

# this would remove punctuation if differently punctuated same names
# for now assuming not an issue
classes$Drug_Name <- gsub("[[:punct:]]", "", classes$Drug_Name)
classes$Drug_Class <- gsub("[[:punct:]]", "", classes$Drug_Class)

# subset drug class database to drugs of interest
classes = classes %>%
  filter(Drug_Name %in% drugs==TRUE)

# remove exact duplicate rows (15 drugs with >1 classes each left)
classes = distinct(classes)

# replace slashes in drug classes with "and"
classes$Drug_Class = gsub("/", "and", classes$Drug_Class)

# merge drugs with multiple class names
classes = classes %>%
  group_by(Drug_Name) %>%
  summarise(Drug_Class=paste(unique(Drug_Class),collapse='$'))

# add in drugs with EPC classes that are missing from 2023 data (synonyms/missing)
# will incorporate synonyms later
mult_names_classes = data.frame(Drug_Name=c("GABAPENTIN", "DOXYCYCLINE",
                                            "MYCOPHENOLATE MOFETIL",
                                            "PENICILLIN V POTASSIUM","QUINAPRIL",
                                            "LORATADINE",
                                            "ALENDRONATE","ENALAPRIL","OSELTAMIVIR",
                                            "BENAZEPRIL","RAMIPRIL","CLAVULANATE",
                                            "BISACODYL","IBANDRONATE","CANAGLIFLOZIN"),
                                Drug_Class=c("antiepileptic drug (aed)",
                                             "tetracycline-class drug",
                                             "antimetabolite immunosuppressant",
                                             "penicillin class antibacterial","
                                      angiotensin converting enzyme (ace) 
                                      inhibitor",
                                             "histamine-1 (h1) receptor antagonist",
                                             "bisphosphonate","
                                      angiotensin converting enzyme inhibitor",
                                             "influenza neuraminidase inhibitor (nai)",
                                             "angiotensin converting enzyme inhibitor",
                                             "angiotensin converting enzyme inhibitor",
                                             "beta lactamase inhibitor",
                                             "stimulant laxative","bisphosphonate",
                                             "sodium-glucose co-transporter 2 (sglt2)
                                      inhibitor"))

# add NAs to remaining drugs that do not have EPC
no_epc = data.frame(Drug_Name=c("MIRTAZAPINE","PREGABALIN","ACETAMINOPHEN",
                                "DOCUSATE","TOPIRAMATE","BUSPIRONE",
                                "LEVETIRACETAM","PHENAZOPYRIDINE",
                                "DIVALPROEX SODIUM","ICOSAPENT",
                                "VORTIOXETINE","CYPROHEPTADINE","HYOSCYAMINE",
                                "ESZOPICLONE","TRIPROLIDINE"),
                    Drug_Class=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))

classes = bind_rows(classes, mult_names_classes, no_epc)

# reorder classes to be in the order of the rest of the db
classes_reorder_ind = match(densities$Names, classes$Drug_Name)

classes = classes[classes_reorder_ind,]

# reorder classes to export classes with associated drug names
classes_reordered_ind = match(total_daily_dosages$Pharmaceutical,
                              classes$Drug_Name)
classes_reordered = classes[classes_reordered_ind,]

################################################################################
# lump classes that are similar to each other using fuzzy matching (to find the
# classes that are the same but labeled slightly differently)
# Function to find fuzzy matches
find_fuzzy_matches <- function(x, vec, max_dist = 0.2) {
  matches <- agrepl(x, vec, ignore.case = TRUE, max.distance = max_dist)
  return(vec[matches])
}

# Apply the function to find similar names
similar_names <- sapply(classes_reordered$Drug_Class, find_fuzzy_matches,
                        vec = classes_reordered$Drug_Class)

# Create a new data frame with the results
fuz_mat_results <- data.frame(
  Original_Name = rep(classes_reordered$Drug_Class, sapply(similar_names, length)),
  Similar_Name = unlist(similar_names)
  #ID = rep(classes_reordered$ID, sapply(similar_names, length)),
  #Age = rep(classes_reordered$Age, sapply(similar_names, length))
)

# Filter out exact matches
fuz_mat_results <- fuz_mat_results[fuz_mat_results$Original_Name != fuz_mat_results$Similar_Name, ]

# Filter out NA's
fuz_mat_results = na.omit(fuz_mat_results)

# replace more than one whitespace between characters with one whitespace
classes_reordered$Drug_Class <- gsub("\\s+", " ", classes_reordered$Drug_Class)

# remove whitespace around entries
classes_reordered = classes_reordered %>%
  mutate(across(everything(), ~trimws(.)))

# combine classes that are the same in classes df
classes_reordered = classes_reordered %>%
  mutate(Drug_Class = case_when(Drug_Class=="angiotensin ii receptor blocker (arb)" ~ "angiotensin ii receptor blocker", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="hmg-coa reductase inhibitor (statin)" ~ "hmg-coa reductase inhibitor", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="peroxisome proliferator-activated receptor (ppar) alpha\r\nagonist" ~ "peroxisome proliferator-activated receptor alpha agonist", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="peroxisome proliferator-activated receptor (ppar) alpha\r\nagonist$peroxisome proliferator-activated receptor (ppar)\r\ngamma agonist$thiazolidinedione" ~ "peroxisome proliferator-activated receptor alpha agonist$peroxisome proliferator-activated receptor gamma agonist$thiazolidinedione", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="macrolide$macrolide antimicrobial" ~ "macrolide antimicrobial", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="angiotensin converting enzyme (ace) inhibitor" ~ "angiotensin converting enzyme inhibitor", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="central nervous system (cns) stimulant" ~ "central nervous system stimulant", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="non-ergoline dopamine agonist" ~ "nonergot dopamine agonist", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="calcium channel blocker$dihydropyridine calcium channel blocker" ~ "dihydropyridine calcium channel blocker", .default=Drug_Class)) %>%
  mutate(Drug_Class = case_when(Drug_Class=="nucleoside analog hsv dna polymerase inhibitor and vzv\r\ndna polymerase inhibitor" ~ "nucleoside analog hsv dna polymerase inhibitor and vzv dna polymerase inhibitor", .default=Drug_Class))

# remove dashes
classes_reordered$Drug_Class = gsub("-", " ", classes_reordered$Drug_Class)

# remove whitespace around entries
classes_reordered = classes_reordered %>%
  mutate(across(everything(), ~trimws(.)))

# change column name for Drug_Name to Drug to merge dataframes
classes_reordered = classes_reordered %>%
  rename(Drug = Drug_Name)

# NEED TO FIX THIS, SO THAT DELIMITER FOR MULTIPLE CLASSES IS NO LONGER $

# add class column into meps_clean dataframe
meps_clean = left_join(meps_clean, classes_reordered, by="Drug")

# START HERE WITH CODE CLEANING

# separate on dollar signs - for analyzing trends by class (use classes_reordered
# for analyses that require all classes for each drug)
# note: this makes 10 drugs be duplicated due to having multiple classes
all_classes = classes_reordered %>%
  separate_longer_delim(Drug_Class, delim="$")

# remove whitespace around entries
all_classes = all_classes %>%
  mutate(across(everything(), ~trimws(.)))

################################################################################
# Load and clean CompTox data.
################################################################################

################################################################################
# Add in SMILES and InChiKey
smiles_inchikey = read_excel("smiles_inchikey_248_drugs_1_24_24.xlsx",
                             sheet=2)
smiles_inchikey = smiles_inchikey %>%
  group_by(INPUT) %>%
  summarize(SMILES = paste(SMILES, collapse = ", "),
            INCHIKEY = paste(INCHIKEY, collapse = ", ")) %>%
  rename(Drug = INPUT)

# append to meps_clean
meps_clean = left_join(meps_clean, smiles_inchikey, by="Drug")

# rename Drug column for outputting to probability_calculator
smiles_inchikey = smiles_inchikey %>%
  rename(Pharmaceutical = Drug)

################################################################################
# now make data frame to export molar mass
molar_mass_df = distinct(meps_clean, Drug, .keep_all=TRUE) # get just the 248 drugs
molar_mass_df = molar_mass_df[match(total_daily_dosages$Pharmaceutical, molar_mass_df$Drug),]
molar_mass_df = molar_mass_df[,c(1,8)]
molar_mass_df = molar_mass_df %>%
  rename(Pharmaceutical = Drug)
################################################################################

################################################################################
# add in physicochemical properties all at once - solubility and density already
# included, so don't worry about those - may want to clean up that code later
# NOTE: all properties are added as medians of all available values for now

# Adding molecular formulas first
molec_formulas = read_excel("comptox_physicochem_props_2_7_24.xlsx",
                            sheet=2)
molec_formulas = subset(molec_formulas, select=MOLECULAR_FORMULA)
molec_formulas = molec_formulas %>%
  mutate(Pharmaceutical = total_daily_dosages$Pharmaceutical)

# Now the physicochemical properties
phys_chem_props = read_excel("comptox_physicochem_props_2_7_24.xlsx",
                            sheet=3)
phys_chem_props = subset(phys_chem_props, select=c(DTXSID, NAME, VALUE, UNITS))

# change VALUE column to numeric
phys_chem_props$VALUE = as.numeric(phys_chem_props$VALUE)

# check that units are consistent for all values of NAME
# consistency_check <- phys_chem_props %>%
#        group_by(NAME) %>%
#        summarise(unique_units = n_distinct(UNITS)) %>%
#        mutate(consistent_units = unique_units == 1)

# Add a row number column
phys_chem_props <- phys_chem_props %>%
  mutate(row_num = row_number())

# make individual data frames for each property (since group_by not working)
phys_chem_props$NAME <- trimws(phys_chem_props$NAME)

# Split the data frame by NAME
properties <- phys_chem_props %>%
  group_split(NAME)

# Function to calculate median of "Value" for each group of "ID" in a data frame
calculate_median <- function(df) {
  df %>%
    group_by(DTXSID, NAME, UNITS) %>%
    summarize(median_VALUE = median(VALUE))
}

# Apply the function to each data frame in the list
median_list <- lapply(properties, calculate_median)

# Combine the results into a single data frame
properties <- do.call(rbind, median_list)

# put UNITS after NAME
properties = properties %>%
  relocate(median_VALUE, .before=UNITS)

# split into separate data frame for each property
properties <- split(properties, properties$NAME)

# add in NA's for missing values (to make data frames same length for sorting)
for (i in seq_along(properties)) {
  # Find the missing rows
  missing_rows <- length(unique(meps_clean$Drug)) - nrow(properties[[i]])
  if (missing_rows > 0) {
    # Create a data frame with NA values for missing rows
    missing_df <- data.frame(
      DTXSID = rep(NA, missing_rows),
      NAME = rep(names(properties)[i], missing_rows),
      median_VALUE = rep(NA, missing_rows),
      UNITS = rep(NA, missing_rows)
    )
    # Bind the missing rows to the original data frame
    properties[[i]] <- rbind(properties[[i]], missing_df)
  }
}

# Add an extra row of NA to each data frame to account for divalproex
for (i in seq_along(properties)) {
  # Extract the last non-NA value of "NAME"
  last_name <- tail(properties[[i]]$NAME[!is.na(properties[[i]]$NAME)], 1)
  
  # Create a data frame with the missing row
  missing_df <- data.frame(
    DTXSID = "DTXSID70227388",
    NAME = last_name,  # Fill in the missing row with the last non-NA value of "NAME"
    median_VALUE = NA,
    UNITS = NA
  )
  
  # Bind the missing row to the original data frame
  properties[[i]] <- rbind(properties[[i]], missing_df)
}

# Initialize a list to store missing DTXSID values for each data frame
missing_dtxsid <- list()

# Loop through each data frame in the properties list
for (i in seq_along(properties)) {
  # Find the missing DTXSID values in the current data frame
  missing_dtxsid[[i]] <- setdiff(unique(phys_chem_props$DTXSID), unique(properties[[i]]$DTXSID))
}

# Function to replace NA values with missing DTXSID values
replace_na_with_missing_dtxsid <- function(df, missing_dtxsid) {
  # Replace NA values in DTXSID column with missing DTXSID values
  df$DTXSID[is.na(df$DTXSID)] <- missing_dtxsid
  return(df)
}

# Replace NA values with missing DTXSID values for each data frame
properties[-c(1,10,11,22)] <- map2(properties[-c(1,10,11,22)], missing_dtxsid[-c(1,10,11,22)],
                   replace_na_with_missing_dtxsid)

# load in correct order of DTXSID to match drug order in main database
dtxsid_order = read_excel("DTXSID_name_correct_order_2_10_24.xlsx")

ordered_properties <- lapply(properties, function(df) {
  df <- df[match(dtxsid_order$DTXSID, df$DTXSID), ]
  return(df)
})

# pharmaceutical names column
pharma = dtxsid_order$Pharmaceutical

# Function to add pharmaceutical names column to each data frame
add_additional_column <- function(df, pharma) {
  df$Pharmaceutical <- pharma
  return(df)
}

# Add additional column to each data frame in the properties list
properties <- map(ordered_properties, add_additional_column, pharma)

# remove colon from property names
names(properties)[which(names(properties) == "LogKoa: Octanol-Air")] <- "LogKoa Octanol-Air"
names(properties)[which(names(properties) == "LogKow: Octanol-Water")] <- "LogKow Octanol-Water"

# remove extra columns not needed in main database
properties <- lapply(properties, function(df) df[, !(names(df) %in% c("DTXSID", "NAME", "UNITS"))])

# rename median column to be name of property
# Function to rename a column in a data frame
rename_column <- function(df, new_name) {
  df <- df %>% rename(!!new_name := median_VALUE)
  return(df)
}

# Rename the column in each data frame in the list with different names
properties <- Map(rename_column, properties, names(properties))

# Note: UNITS removed and added to README to avoid causing issues with future
# computations due to slashes and such

################################################################################
##### TOXICITY NOTES ######
# FIRST SEE WHAT TOX NUMBERS AVAIL ALL DRUGS
# for toxicity, use ToxValDB Details in CompTox batch search
# human and animal -but what animal? plants? use scaling factors
# use human and non-human columns (may include organism), safety factors
# multiply by 1 for humans
# multiply by 10 for non-human
# invert, plant, etc: exclude it 
# 0/1, organism, scaled by safety factor
# expand into EcoTox at some point
# also what measure of tox is best? multiple? will depend on avail. for this & above
# drug interac? what effects is the NOEC related to?
#check how to best combine, consider scaling factors -
# did I choose the correct measures? human tox...
#######

# add in toxicity data
tox_data = read_excel("comptox_toxicity_2_10_24.xlsx", sheet=3)

# remove unneeded rows
rows_to_keep = c("SEARCHED_CHEMICAL", "DTXSID", "TOXVAL_TYPE",
                 "TOXVAL_NUMERIC", "TOXVAL_UNITS", "SPECIES_COMMON",
                 "SPECIES_SUPERCATEGORY")
tox_data = tox_data[,rows_to_keep]
# rename SEARCHED_CHEMICAL
colnames(tox_data)[colnames(tox_data) == "SEARCHED_CHEMICAL"] <- "Pharmaceutical"

# read in correct name/DTXSID mapping
name_dtxsid_map = read_excel("DTXSID_name_correct_order_2_10_24.xlsx", sheet=1)

# change all names to align with other data based on mapping
tox_data = merge(tox_data, name_dtxsid_map, by="DTXSID", all.x=TRUE)

tox_data = tox_data %>%
  select(-Pharmaceutical.x) %>%
  rename(Pharmaceutical = Pharmaceutical.y) %>%
  relocate(Pharmaceutical, .after = DTXSID)

# filter tox_data for NOEC (chronic) and LC50 (acute): data only available for 97 drugs
tox_data = tox_data %>%
  filter(TOXVAL_TYPE=="NOEC" | TOXVAL_TYPE=="LC50") %>%
  group_by(Pharmaceutical)

# fix units (either mg/L or mg/kg - applies for both LC50 and NOEC)
# note: LC50 technically should be mg/kg and NOEC should technically be mg/L
# assume it's the concentration/dose exposed to and that full amount is taken up
# by organism (not really because Kow, etc)

# add in molar mass for unit conversions
meps_clean = meps_clean %>%
  rename(Pharmaceutical=Drug)
drug_mass <- meps_clean %>%
  group_by(Pharmaceutical) %>%
  slice(1) %>%
  ungroup()
tox_data <- merge(tox_data, drug_mass[, c("Pharmaceutical", "Molar_Mass")],
                   by = "Pharmaceutical", all.x = TRUE)

# first remove or revise units that don't work
tox_data <- tox_data[tox_data$TOXVAL_UNITS != "ng/egg", ] #ok to remove b/c other values available for this measurement
tox_data = tox_data %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS == "nM/org" ~ "nM",
                         .default=TOXVAL_UNITS))
tox_data <- tox_data[tox_data$TOXVAL_UNITS != "% diet", ] #not useful in this form, does exclude largemouth bass
tox_data = tox_data %>% # fixing for propranolol in rainbow trout with these units only - based on paper (see original batch search)
  mutate(TOXVAL_NUMERIC = case_when(TOXVAL_UNITS=="uM/kg-minute" ~ 50,
                                    .default=TOXVAL_NUMERIC)) %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS == "uM/kg-minute" ~ "uM",
                                  .default=TOXVAL_UNITS))
tox_data = tox_data %>% #assume NOEC is per day for ALL drugs!!!
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS=="mg/kg-day" ~ "mg/kg",
                                  .default=TOXVAL_UNITS))
tox_data <- tox_data[tox_data$TOXVAL_UNITS != "mg", ] #ok to remove b/c other values available for this measurement

# then do conversions (assume in water)
tox_data = tox_data %>%
  mutate(TOXVAL_NUMERIC = case_when(TOXVAL_UNITS=="mg/m3" ~ TOXVAL_NUMERIC/1000,
                                    .default=TOXVAL_NUMERIC)) %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS=="mg/m3" ~ "mg/L",
                                  .default=TOXVAL_UNITS)) %>%
  mutate(TOXVAL_NUMERIC = case_when(TOXVAL_UNITS=="nM" ~ TOXVAL_NUMERIC*Molar_Mass*1000/1E+09,
                                    .default=TOXVAL_NUMERIC)) %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS=="nM" ~ "mg/L",
                                  .default=TOXVAL_UNITS)) %>%
  mutate(TOXVAL_NUMERIC = case_when(TOXVAL_UNITS=="mol/g" ~ TOXVAL_NUMERIC*1000*Molar_Mass*1000,
                                    .default=TOXVAL_NUMERIC)) %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS=="mol/g" ~ "mg/kg",
                                  .default=TOXVAL_UNITS)) %>%
  mutate(TOXVAL_NUMERIC = case_when(TOXVAL_UNITS=="uM" ~ TOXVAL_NUMERIC*Molar_Mass*1000/1E+06,
                                    .default=TOXVAL_NUMERIC)) %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS=="uM" ~ "mg/L",
                                  .default=TOXVAL_UNITS))

# take median of toxicity value if TOXVAL_TYPE, NAME, SPECIES_COMMON same
tox_data = tox_data %>%
  group_by(TOXVAL_TYPE, Pharmaceutical, SPECIES_COMMON, SPECIES_SUPERCATEGORY, TOXVAL_UNITS) %>%
  summarize(median_tox = median(TOXVAL_NUMERIC))

# define super-supercategories
vertebrates = c("Amphibians", "Fish", "Mammals")
invertebrates = c("Crustaceans", "Insects/Spiders", "Invertebrates", "Worms",
                  "Molluscs")
plants_algae = (c("Algae", "Flowers, Trees, Shrubs, Ferns"))

# remove miscellaneous super-category
tox_data <- tox_data[tox_data$SPECIES_SUPERCATEGORY != "Miscellaneous", ]

################
# LC50
################

# get minimum vertebrate LC50 to compute human LC50
lc50_vert_min = tox_data %>%
  filter(TOXVAL_TYPE=="LC50") %>%
  mutate(Animal_category = case_when(SPECIES_SUPERCATEGORY %in% vertebrates ~ "Vertebrate",
                                     SPECIES_SUPERCATEGORY %in% invertebrates ~ "Invertebrate",
                                     SPECIES_SUPERCATEGORY %in% plants_algae ~ "Plants_and_Algae")) %>%
  group_by(Pharmaceutical,Animal_category,TOXVAL_UNITS)

lc50_vert_min = lc50_vert_min %>%
  filter(Animal_category == "Vertebrate") %>%
  summarize(min_tox=min(median_tox)) %>%
  mutate(min_tox = min_tox*1000) # converting to ug/L
  
# organize data to get fewer values per drug
lc50 = tox_data %>%
  filter(TOXVAL_TYPE=="LC50") %>%
  mutate(Animal_category = case_when(SPECIES_SUPERCATEGORY %in% vertebrates ~ "Vertebrate",
                                         SPECIES_SUPERCATEGORY %in% invertebrates ~ "Invertebrate",
                                     SPECIES_SUPERCATEGORY %in% plants_algae ~ "Plants_and_Algae")) %>%
  group_by(Pharmaceutical,Animal_category,TOXVAL_UNITS) %>%
  summarize(median_tox=median(median_tox))

# make lc50 so that each pharmaceutical only appears in 1 row
lc50 = lc50 %>%
  pivot_wider(
    id_cols = Pharmaceutical,
    names_from = Animal_category,
    values_from = median_tox,
    values_fill = list(median_tox = NA)
  )

# update names of dataframe
lc50 = lc50 %>% #lc50 is in mg/L (include in Shiny app or here if possible...)
  rename(Plants_Algae_Median_LC50 = Plants_and_Algae) %>%
  rename(Vertebrate_Median_LC50 = Vertebrate) %>%
  rename(Invertebrate_Median_LC50 = Invertebrate)

# convert to ug/L - all in ug/L 
lc50 = lc50 %>%
  mutate(Plants_Algae_Median_LC50 = Plants_Algae_Median_LC50*1000) %>%
  mutate(Vertebrate_Median_LC50 = Vertebrate_Median_LC50*1000) %>%
  mutate(Invertebrate_Median_LC50 = Invertebrate_Median_LC50*1000)

# find missing drugs to assign NA
missing_drugs <- setdiff(unique(meps_clean$Pharmaceutical),
                         unique(lc50$Pharmaceutical))
#missing_drugs = str_to_title(missing_drugs)

# Number of empty rows to add
num_empty_rows <- length(missing_drugs)

# Create a data frame with the specified number of empty rows filled with NA
empty_rows <- data.frame(matrix(NA, ncol = ncol(lc50), nrow = num_empty_rows))
colnames(empty_rows) <- colnames(lc50)

# fix class of empty_rows columns
lc50 <- lc50 %>%
  mutate_at(vars(-matches("Pharmaceutical")), as.numeric)

# Add the empty rows to the data frame
lc50 <- rbind(lc50, empty_rows)

# Function to replace NA values with missing DTXSID values
replace_na_with_missing_drug <- function(df, missing_drugs) {
  # Replace NA values
  df$Pharmaceutical[is.na(df$Pharmaceutical)] <- missing_drugs
  return(df)
}

lc50 = replace_na_with_missing_drug(lc50, missing_drugs)

# put in correct order for export
reorder_lc50 = match(name_dtxsid_map$Pharmaceutical, lc50$Pharmaceutical)
lc50 = lc50[reorder_lc50,]

# bind with dataframe with min vertebrate toxicity
lc50 = left_join(lc50, lc50_vert_min, by = "Pharmaceutical")

# remove unneeded columns from join
lc50 = lc50 %>%
  select(-c(Animal_category, TOXVAL_UNITS)) %>%
  rename(Min_Vertebrate_LC50 = min_tox)

################
# NOEC
################

# get minimum vertebrate NOEC to compute human NOEC
noec_vert_min = tox_data %>%
  filter(TOXVAL_TYPE=="NOEC") %>%
  mutate(Animal_category = case_when(SPECIES_SUPERCATEGORY %in% vertebrates ~ "Vertebrate",
                                     SPECIES_SUPERCATEGORY %in% invertebrates ~ "Invertebrate",
                                     SPECIES_SUPERCATEGORY %in% plants_algae ~ "Plants_and_Algae")) %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS == "mg/kg" ~ "mg/L",
                                  .default = TOXVAL_UNITS)) %>% # do b/c using equiv water weight
  group_by(Pharmaceutical,Animal_category,TOXVAL_UNITS) # all units should be mg/L here

noec_vert_min = noec_vert_min %>%
  filter(Animal_category == "Vertebrate") %>%
  summarize(min_tox=min(median_tox)) %>%
  mutate(min_tox = min_tox*1000) # converting to ug/L

# organize data to get fewer values per drug
noec = tox_data %>%
  filter(TOXVAL_TYPE=="NOEC") %>%
  mutate(Animal_category = case_when(SPECIES_SUPERCATEGORY %in% vertebrates ~ "Vertebrate",
                                     SPECIES_SUPERCATEGORY %in% invertebrates ~ "Invertebrate",
                                     SPECIES_SUPERCATEGORY %in% plants_algae ~ "Plants_and_Algae")) %>%
  mutate(TOXVAL_UNITS = case_when(TOXVAL_UNITS == "mg/kg" ~ "mg/L",
                                  .default = TOXVAL_UNITS)) %>% # do b/c using equiv water weight
  group_by(Pharmaceutical,Animal_category,TOXVAL_UNITS) %>%
  summarize(median_tox=median(median_tox))

# make noec so that each pharmaceutical only appears in 1 row
noec <- noec %>%
  pivot_wider(
    names_from = c(Animal_category),
    values_from = median_tox,
    names_sep = "_",
    names_glue = "{Animal_category} median toxicity"
  )

# remove TOXVAL_UNITS - all mg/L at this point because of equiv water weight assump
noec = noec %>%
  select(-TOXVAL_UNITS)

# rename columns to be more specific
colnames(noec) = c("Pharmaceutical", "Invertebrate_median_NOEC",
                   "Plants_algae_median_NOEC", "Vertebrate_median_NOEC")

# convert to ug/L
noec = noec %>%
  mutate(Invertebrate_median_NOEC = Invertebrate_median_NOEC*1000) %>%
  mutate(Vertebrate_median_NOEC = Vertebrate_median_NOEC*1000) %>%
  mutate(Plants_algae_median_NOEC = Plants_algae_median_NOEC*1000)

# find missing drugs to assign NA
missing_drugs <- setdiff(unique(meps_clean$Pharmaceutical),
                         unique(noec$Pharmaceutical))
#missing_drugs = str_to_title(missing_drugs)

# Number of empty rows to add
num_empty_rows <- length(missing_drugs)

# Create a data frame with the specified number of empty rows filled with NA
empty_rows <- data.frame(matrix(NA, ncol = ncol(noec), nrow = num_empty_rows))
colnames(empty_rows) <- colnames(noec)

# fix class of empty_rows columns
noec <- noec %>%
  mutate_at(vars(-matches("Pharmaceutical")), as.numeric)

# Add the empty rows to the data frame
noec <- rbind(noec, empty_rows)

# Function to replace NA values with missing DTXSID values
replace_na_with_missing_drug <- function(df, missing_drugs) {
  # Replace NA values
  df$Pharmaceutical[is.na(df$Pharmaceutical)] <- missing_drugs
  return(df)
}

noec = replace_na_with_missing_drug(noec, missing_drugs)

# put in correct order for export
reorder_noec = match(name_dtxsid_map$Pharmaceutical, noec$Pharmaceutical)
noec = noec[reorder_noec,]

# bind with dataframe with min vertebrate toxicity
noec = left_join(noec, noec_vert_min, by = "Pharmaceutical")

# remove unneeded columns from join
noec = noec %>%
  select(-c(Animal_category, TOXVAL_UNITS)) %>%
  rename(Min_Vertebrate_NOEC = min_tox)

################################################################################

# find percent urine for each pharmaceutical
# assumptions: 1 prescription is 1 person - so PDD/num_prescrip gives pdd per
# capita; all pharmaceuticals are excreted in urine; avg US resident produces
# 1.4 L urine per day, about same as 1.4 kg=1400000000 ug; lactulose excreted
# fecally and removed from dataset
urine_percent = left_join(total_daily_dosages, total_prescribed)
# remove lactulose
urine_percent = urine_percent[-1,]
urine_percent = urine_percent %>%
  mutate(PDD_per_capita = Prescribed_Daily_Dosage/Num_Prescriptions) %>%
  mutate(urine_percent = 100*(PDD_per_capita/1400000000)) %>%
  arrange(desc(urine_percent))

# export important data frames for putting into main database
#write.csv(meps_clean, "meps_clean.csv")
write.csv(total_daily_dosages, "total_daily_dosages.csv")
write.csv(total_prescribed, "total_prescribed.csv")
#write.csv(urine_percent, "urine_percent.csv")
#write.csv(all_classes, "all_classes.csv")
write.csv(classes_reordered, "classes_reordered.csv")
write.csv(smiles_inchikey, "smiles_inchikey.csv")
write.csv(molar_mass_df, "molar_mass_df.csv")
write.csv(molec_formulas, "molec_formulas.csv")
dir.create("properties", showWarnings = FALSE) #makes properties directory
for (i in seq_along(properties)) {
  filename <- paste0("properties/", names(properties)[i], ".csv")
  write.csv(properties[[i]], file = filename, row.names = FALSE)
}
#write.csv(names(properties), "properties_headings.csv")
write.csv(lc50, "lc50.csv")
write.csv(noec, "noec.csv")