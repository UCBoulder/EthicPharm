library("cowplot")
################################################################################
# PharmFlush model creation
################################################################################
# load PharmUse database
pharmuse = read.csv("pharmuse.csv")
# Define model parameters
n = 26847 # size of representative sample (obtained from MEPS 2020
# documentation, Table 3.2)
ww_volume_per_capita = 310.404 # average American wastewater production per
# capita per day, source: Dieter et al., 2018
wastewater_pop_size = 100000 # size of sewershed (change for different sizes)
pop_wastewater_volume = wastewater_pop_size * ww_volume_per_capita # total wastewater
# volume for sewershed
# of given size
x = 0:wastewater_pop_size # range of number of prescriptions detected in
# sewershed any given day for given drug
p = 0 # initialize probability of detecting certain pharmaceutical on any given day
avg_mass = 0 # initialize avg mass per day variable for each pharmaceutical
# pull relevant variables from PharmUse
drugs = pharmuse$Pharmaceutical
avg_DD = pharmuse$Average_Daily_Dosage
prescrips = pharmuse$Number_of_Prescriptions
durations = pharmuse$Average_Duration_per_Prescription
# calculate probability of detecting each pharmaceutical on any given day and
# create list of average daily mass for each pharmaceutical
for (i in 1:length(drugs)){
p[i] = (prescrips[i]*durations[i])/(n*365)
avg_mass[i] = avg_DD[i]
}
# Calculate probability P of detecting exactly x prescriptions for given drug in
# sewershed of wastewater_pop_size with detection probability p
P = list()
for (i in 1:length(drugs)){
new_P = dbinom(x,wastewater_pop_size,p[i])
P = append(P, list(new_P))
}
# convert P to data frame and label each column by drug name
P = data.frame(P)
names(P) = drugs
# add number of prescriptions detected (x variable) to P
P = P %>%
mutate(Number_prescrips_detected = x)
# name common column and all drug columns to allow splitting into separate df's
Number_prescrips_detected = "Number_prescrips_detected"
drug_col_names = colnames(P)[!colnames(P) %in% Number_prescrips_detected]
# Split the data frame into separate data frames for each drug with number of
# prescriptions detected and probability of each number of prescriptions being
# detected
drug_dataframes = lapply(drug_col_names, function(drug_col) {
split_df = P[c(Number_prescrips_detected, drug_col)]
colnames(split_df)[2] = "Probability"
return(split_df)
})
names(drug_dataframes) = drugs
# randomly pull (# prescriptions, Probability) pairs for each drug to randomly
# construct wastewater flows by bootstrapping (generating 100 possible drug
# concentration profiles or ensembles)
set.seed(123)
sampled_dataframes = list()
sample_size = 100
for (i in 1:length(drugs)) {
drug_df = drug_dataframes[[i]]
prob_distribution = drug_df[2]
sampled_rows = sample(nrow(drug_df), size = sample_size, replace = TRUE,
prob=unlist(prob_distribution))
sampled_df = drug_df[sampled_rows, ]
sampled_df$Drug = drugs[i]
sampled_dataframes[[i]] = sampled_df
}
final_sampled_data = do.call(rbind, sampled_dataframes)
# randomly combine results to get sample_size number of drug profiles
ensemble_drug_profiles = list()
for (i in 1:sample_size){
selected_rows = final_sampled_data[seq(i, nrow(final_sampled_data),
by = sample_size), ]
ensemble = data.frame(
Drug = selected_rows$Drug,
Number_prescrips_detected = selected_rows$Number_prescrips_detected,
Probability = selected_rows$Probability
)
ensemble = ensemble %>%
mutate(Average_daily_mass = avg_mass) %>%
mutate(Predicted_mass = Average_daily_mass*Number_prescrips_detected) %>%
mutate(Predicted_concentration = Predicted_mass/pop_wastewater_volume) %>%
# divide by 4 to correct for medication non-compliance of 50% and employees'
# contributions to wastewater flow (assume equal number of non-resident
#  employees to residents)
mutate(Predicted_concentration = Predicted_concentration/4) %>%
arrange(desc(Predicted_concentration))
ensemble_drug_profiles[[i]] = ensemble
}
# get separate data frame for each drug's ensemble prediction (100 per drug)
# Initialize an empty list to store the 290 new dataframes
indiv_drug_profiles = list()
# Loop over each pharmaceutical name
for (drug in drugs) {
# Initialize an empty list to collect data for this pharmaceutical across all
# dataframes
pharma_data = list()
# Loop over the list of dataframes
for (ensemble_drug_profile in ensemble_drug_profiles) {
# Extract rows corresponding to the current pharmaceutical
pharma_row = ensemble_drug_profile[ensemble_drug_profile$Drug == drug, ]
# Add the row to the pharma_data list
pharma_data = rbind(pharma_data, pharma_row)
}
# Combine all the data for this pharmaceutical into a single dataframe
indiv_drug_profiles[[drug]] = pharma_data
}
# average predicted concentration for each drug to form final drug concentration
# profile that averages across all 100 ensembles for each drug
average_concs = list()
average_prescrips = list()
average_masses = list()
sem_concs = list() # SEM = standard error of mean
for (i in 1:length(indiv_drug_profiles)) {
avg_conc = mean(unlist(indiv_drug_profiles[[i]][6]))
avg_conc = matrix(avg_conc, ncol = 1)
average_concs[i] = avg_conc
avg_mass = mean(unlist(indiv_drug_profiles[[i]][5]))
avg_mass = matrix(avg_mass, ncol = 1)
average_masses[i] = avg_mass
stan_dev_conc = sd(unlist(indiv_drug_profiles[[i]][6]))
sem_conc = stan_dev_conc / sqrt(sample_size)
sem_conc = matrix(sem_conc, ncol = 1)
sem_concs[i] = sem_conc
avg_prescrip = mean(unlist(indiv_drug_profiles[[i]][2]))
avg_prescrip = matrix(avg_prescrip, ncol = 1)
average_prescrips[i] = avg_prescrip
}
# put in form that is compatible with data frame
average_concs = unlist(average_concs)
average_prescrips = unlist(average_prescrips)
average_masses = unlist(average_masses)
sem_concs = unlist(sem_concs)
# make data frame for average profile for each drug
average_profile = data.frame(Drug=drugs,
Average_Number_Prescriptions=average_prescrips,
Average_Masses=average_masses,
Average_Predicted_Concentration=average_concs,
Standard_Error_Predicted_Concentration=sem_concs)
average_profile = average_profile %>%
arrange(desc(Average_Predicted_Concentration))
# prep data frame for stacked bar graph with all ensembles
# Initialize an empty dataframe to store the results
stacked_ensembles = data.frame()
# Loop through each dataframe in the list
for (i in seq_along(ensemble_drug_profiles)) {
# Extract the current dataframe
ensemble = ensemble_drug_profiles[[i]]
# Add a column indicating the index
ensemble$Ensemble_number = i
# Select relevant columns
ensemble_subset = ensemble[, c('Ensemble_number', 'Drug',
'Predicted_concentration')]
# Append the dataframe to the combined dataframe
stacked_ensembles = rbind(stacked_ensembles, ensemble_subset)
}
# load PharmUse database
pharmuse = read.csv("pharmuse.csv")
# Define model parameters
n = 26847 # size of representative sample (obtained from MEPS 2020
# documentation, Table 3.2)
ww_volume_per_capita = 310.404 # average American wastewater production per
# capita per day, source: Dieter et al., 2018
wastewater_pop_size = 1000 # size of sewershed (change for different sizes)
pop_wastewater_volume = wastewater_pop_size * ww_volume_per_capita # total wastewater
# volume for sewershed
# of given size
x = 0:wastewater_pop_size # range of number of prescriptions detected in
# sewershed any given day for given drug
p = 0 # initialize probability of detecting certain pharmaceutical on any given day
avg_mass = 0 # initialize avg mass per day variable for each pharmaceutical
# pull relevant variables from PharmUse
drugs = pharmuse$Pharmaceutical
avg_DD = pharmuse$Average_Daily_Dosage
prescrips = pharmuse$Number_of_Prescriptions
durations = pharmuse$Average_Duration_per_Prescription
# calculate probability of detecting each pharmaceutical on any given day and
# create list of average daily mass for each pharmaceutical
for (i in 1:length(drugs)){
p[i] = (prescrips[i]*durations[i])/(n*365)
avg_mass[i] = avg_DD[i]
}
# Calculate probability P of detecting exactly x prescriptions for given drug in
# sewershed of wastewater_pop_size with detection probability p
P = list()
for (i in 1:length(drugs)){
new_P = dbinom(x,wastewater_pop_size,p[i])
P = append(P, list(new_P))
}
# convert P to data frame and label each column by drug name
P = data.frame(P)
names(P) = drugs
# add number of prescriptions detected (x variable) to P
P = P %>%
mutate(Number_prescrips_detected = x)
# name common column and all drug columns to allow splitting into separate df's
Number_prescrips_detected = "Number_prescrips_detected"
drug_col_names = colnames(P)[!colnames(P) %in% Number_prescrips_detected]
# Split the data frame into separate data frames for each drug with number of
# prescriptions detected and probability of each number of prescriptions being
# detected
drug_dataframes = lapply(drug_col_names, function(drug_col) {
split_df = P[c(Number_prescrips_detected, drug_col)]
colnames(split_df)[2] = "Probability"
return(split_df)
})
names(drug_dataframes) = drugs
# randomly pull (# prescriptions, Probability) pairs for each drug to randomly
# construct wastewater flows by bootstrapping (generating 100 possible drug
# concentration profiles or ensembles)
set.seed(123)
sampled_dataframes = list()
sample_size = 100
for (i in 1:length(drugs)) {
drug_df = drug_dataframes[[i]]
prob_distribution = drug_df[2]
sampled_rows = sample(nrow(drug_df), size = sample_size, replace = TRUE,
prob=unlist(prob_distribution))
sampled_df = drug_df[sampled_rows, ]
sampled_df$Drug = drugs[i]
sampled_dataframes[[i]] = sampled_df
}
final_sampled_data = do.call(rbind, sampled_dataframes)
# randomly combine results to get sample_size number of drug profiles
ensemble_drug_profiles = list()
for (i in 1:sample_size){
selected_rows = final_sampled_data[seq(i, nrow(final_sampled_data),
by = sample_size), ]
ensemble = data.frame(
Drug = selected_rows$Drug,
Number_prescrips_detected = selected_rows$Number_prescrips_detected,
Probability = selected_rows$Probability
)
ensemble = ensemble %>%
mutate(Average_daily_mass = avg_mass) %>%
mutate(Predicted_mass = Average_daily_mass*Number_prescrips_detected) %>%
mutate(Predicted_concentration = Predicted_mass/pop_wastewater_volume) %>%
# divide by 4 to correct for medication non-compliance of 50% and employees'
# contributions to wastewater flow (assume equal number of non-resident
#  employees to residents)
mutate(Predicted_concentration = Predicted_concentration/4) %>%
arrange(desc(Predicted_concentration))
ensemble_drug_profiles[[i]] = ensemble
}
# get separate data frame for each drug's ensemble prediction (100 per drug)
# Initialize an empty list to store the 290 new dataframes
indiv_drug_profiles = list()
# Loop over each pharmaceutical name
for (drug in drugs) {
# Initialize an empty list to collect data for this pharmaceutical across all
# dataframes
pharma_data = list()
# Loop over the list of dataframes
for (ensemble_drug_profile in ensemble_drug_profiles) {
# Extract rows corresponding to the current pharmaceutical
pharma_row = ensemble_drug_profile[ensemble_drug_profile$Drug == drug, ]
# Add the row to the pharma_data list
pharma_data = rbind(pharma_data, pharma_row)
}
# Combine all the data for this pharmaceutical into a single dataframe
indiv_drug_profiles[[drug]] = pharma_data
}
# average predicted concentration for each drug to form final drug concentration
# profile that averages across all 100 ensembles for each drug
average_concs = list()
average_prescrips = list()
average_masses = list()
sem_concs = list() # SEM = standard error of mean
for (i in 1:length(indiv_drug_profiles)) {
avg_conc = mean(unlist(indiv_drug_profiles[[i]][6]))
avg_conc = matrix(avg_conc, ncol = 1)
average_concs[i] = avg_conc
avg_mass = mean(unlist(indiv_drug_profiles[[i]][5]))
avg_mass = matrix(avg_mass, ncol = 1)
average_masses[i] = avg_mass
stan_dev_conc = sd(unlist(indiv_drug_profiles[[i]][6]))
sem_conc = stan_dev_conc / sqrt(sample_size)
sem_conc = matrix(sem_conc, ncol = 1)
sem_concs[i] = sem_conc
avg_prescrip = mean(unlist(indiv_drug_profiles[[i]][2]))
avg_prescrip = matrix(avg_prescrip, ncol = 1)
average_prescrips[i] = avg_prescrip
}
# put in form that is compatible with data frame
average_concs = unlist(average_concs)
average_prescrips = unlist(average_prescrips)
average_masses = unlist(average_masses)
sem_concs = unlist(sem_concs)
# make data frame for average profile for each drug
average_profile = data.frame(Drug=drugs,
Average_Number_Prescriptions=average_prescrips,
Average_Masses=average_masses,
Average_Predicted_Concentration=average_concs,
Standard_Error_Predicted_Concentration=sem_concs)
average_profile = average_profile %>%
arrange(desc(Average_Predicted_Concentration))
# prep data frame for stacked bar graph with all ensembles
# Initialize an empty dataframe to store the results
stacked_ensembles = data.frame()
# Loop through each dataframe in the list
for (i in seq_along(ensemble_drug_profiles)) {
# Extract the current dataframe
ensemble = ensemble_drug_profiles[[i]]
# Add a column indicating the index
ensemble$Ensemble_number = i
# Select relevant columns
ensemble_subset = ensemble[, c('Ensemble_number', 'Drug',
'Predicted_concentration')]
# Append the dataframe to the combined dataframe
stacked_ensembles = rbind(stacked_ensembles, ensemble_subset)
}
stacked_ensembles_lessthan4 = stacked_ensembles %>%
filter(Ensemble_number <= 10) %>%
filter(Predicted_concentration < 4)
# sum up concentrations less than 4 ug/L
stacked_ensembles_lessthan4 = aggregate(stacked_ensembles_lessthan4$Predicted_concentration,
list(stacked_ensembles_lessthan4$Ensemble_number),
FUN=sum)
stacked_ensembles_lessthan4 = stacked_ensembles_lessthan4 %>%
mutate(Drug = "Others") %>%
relocate(Drug, .after=Group.1)
colnames(stacked_ensembles_lessthan4) = c("Ensemble_number","Drug",
"Predicted_concentration")
# get all pharmaceuticals over 10 ensembles with concentration >= 4 ug/L
stacked_ensembles_greaterthan4 = stacked_ensembles %>%
filter(Ensemble_number <= 10) %>%
filter(Predicted_concentration >= 4)
stacked_ensembles_greaterthan4$Drug = str_to_title(stacked_ensembles_greaterthan4$Drug)
# merge sums < 4 for each ensemble with pharmaceuticals > 4 for each ensemble
stacked_ensembles_filtered = rbind(stacked_ensembles_greaterthan4,
stacked_ensembles_lessthan4)
View(stacked_ensembles_filtered)
unique(stacked_ensembles_filtered$Drug)
pharmuse = read.csv("pharmuse.csv")
# Define model parameters
n = 26847 # size of representative sample (obtained from MEPS 2020
# documentation, Table 3.2)
ww_volume_per_capita = 310.404 # average American wastewater production per
# capita per day, source: Dieter et al., 2018
wastewater_pop_size = 100 # size of sewershed (change for different sizes)
pop_wastewater_volume = wastewater_pop_size * ww_volume_per_capita # total wastewater
# volume for sewershed
# of given size
x = 0:wastewater_pop_size # range of number of prescriptions detected in
# sewershed any given day for given drug
p = 0 # initialize probability of detecting certain pharmaceutical on any given day
avg_mass = 0 # initialize avg mass per day variable for each pharmaceutical
# pull relevant variables from PharmUse
drugs = pharmuse$Pharmaceutical
avg_DD = pharmuse$Average_Daily_Dosage
prescrips = pharmuse$Number_of_Prescriptions
durations = pharmuse$Average_Duration_per_Prescription
# calculate probability of detecting each pharmaceutical on any given day and
# create list of average daily mass for each pharmaceutical
for (i in 1:length(drugs)){
p[i] = (prescrips[i]*durations[i])/(n*365)
avg_mass[i] = avg_DD[i]
}
# Calculate probability P of detecting exactly x prescriptions for given drug in
# sewershed of wastewater_pop_size with detection probability p
P = list()
for (i in 1:length(drugs)){
new_P = dbinom(x,wastewater_pop_size,p[i])
P = append(P, list(new_P))
}
# convert P to data frame and label each column by drug name
P = data.frame(P)
names(P) = drugs
# add number of prescriptions detected (x variable) to P
P = P %>%
mutate(Number_prescrips_detected = x)
# name common column and all drug columns to allow splitting into separate df's
Number_prescrips_detected = "Number_prescrips_detected"
drug_col_names = colnames(P)[!colnames(P) %in% Number_prescrips_detected]
# Split the data frame into separate data frames for each drug with number of
# prescriptions detected and probability of each number of prescriptions being
# detected
drug_dataframes = lapply(drug_col_names, function(drug_col) {
split_df = P[c(Number_prescrips_detected, drug_col)]
colnames(split_df)[2] = "Probability"
return(split_df)
})
names(drug_dataframes) = drugs
# randomly pull (# prescriptions, Probability) pairs for each drug to randomly
# construct wastewater flows by bootstrapping (generating 100 possible drug
# concentration profiles or ensembles)
set.seed(123)
sampled_dataframes = list()
sample_size = 100
for (i in 1:length(drugs)) {
drug_df = drug_dataframes[[i]]
prob_distribution = drug_df[2]
sampled_rows = sample(nrow(drug_df), size = sample_size, replace = TRUE,
prob=unlist(prob_distribution))
sampled_df = drug_df[sampled_rows, ]
sampled_df$Drug = drugs[i]
sampled_dataframes[[i]] = sampled_df
}
final_sampled_data = do.call(rbind, sampled_dataframes)
# randomly combine results to get sample_size number of drug profiles
ensemble_drug_profiles = list()
for (i in 1:sample_size){
selected_rows = final_sampled_data[seq(i, nrow(final_sampled_data),
by = sample_size), ]
ensemble = data.frame(
Drug = selected_rows$Drug,
Number_prescrips_detected = selected_rows$Number_prescrips_detected,
Probability = selected_rows$Probability
)
ensemble = ensemble %>%
mutate(Average_daily_mass = avg_mass) %>%
mutate(Predicted_mass = Average_daily_mass*Number_prescrips_detected) %>%
mutate(Predicted_concentration = Predicted_mass/pop_wastewater_volume) %>%
# divide by 4 to correct for medication non-compliance of 50% and employees'
# contributions to wastewater flow (assume equal number of non-resident
#  employees to residents)
mutate(Predicted_concentration = Predicted_concentration/4) %>%
arrange(desc(Predicted_concentration))
ensemble_drug_profiles[[i]] = ensemble
}
# get separate data frame for each drug's ensemble prediction (100 per drug)
# Initialize an empty list to store the 290 new dataframes
indiv_drug_profiles = list()
# Loop over each pharmaceutical name
for (drug in drugs) {
# Initialize an empty list to collect data for this pharmaceutical across all
# dataframes
pharma_data = list()
# Loop over the list of dataframes
for (ensemble_drug_profile in ensemble_drug_profiles) {
# Extract rows corresponding to the current pharmaceutical
pharma_row = ensemble_drug_profile[ensemble_drug_profile$Drug == drug, ]
# Add the row to the pharma_data list
pharma_data = rbind(pharma_data, pharma_row)
}
# Combine all the data for this pharmaceutical into a single dataframe
indiv_drug_profiles[[drug]] = pharma_data
}
# average predicted concentration for each drug to form final drug concentration
# profile that averages across all 100 ensembles for each drug
average_concs = list()
average_prescrips = list()
average_masses = list()
sem_concs = list() # SEM = standard error of mean
for (i in 1:length(indiv_drug_profiles)) {
avg_conc = mean(unlist(indiv_drug_profiles[[i]][6]))
avg_conc = matrix(avg_conc, ncol = 1)
average_concs[i] = avg_conc
avg_mass = mean(unlist(indiv_drug_profiles[[i]][5]))
avg_mass = matrix(avg_mass, ncol = 1)
average_masses[i] = avg_mass
stan_dev_conc = sd(unlist(indiv_drug_profiles[[i]][6]))
sem_conc = stan_dev_conc / sqrt(sample_size)
sem_conc = matrix(sem_conc, ncol = 1)
sem_concs[i] = sem_conc
avg_prescrip = mean(unlist(indiv_drug_profiles[[i]][2]))
avg_prescrip = matrix(avg_prescrip, ncol = 1)
average_prescrips[i] = avg_prescrip
}
# put in form that is compatible with data frame
average_concs = unlist(average_concs)
average_prescrips = unlist(average_prescrips)
average_masses = unlist(average_masses)
sem_concs = unlist(sem_concs)
# make data frame for average profile for each drug
average_profile = data.frame(Drug=drugs,
Average_Number_Prescriptions=average_prescrips,
Average_Masses=average_masses,
Average_Predicted_Concentration=average_concs,
Standard_Error_Predicted_Concentration=sem_concs)
average_profile = average_profile %>%
arrange(desc(Average_Predicted_Concentration))
# prep data frame for stacked bar graph with all ensembles
# Initialize an empty dataframe to store the results
stacked_ensembles = data.frame()
# Loop through each dataframe in the list
for (i in seq_along(ensemble_drug_profiles)) {
# Extract the current dataframe
ensemble = ensemble_drug_profiles[[i]]
# Add a column indicating the index
ensemble$Ensemble_number = i
# Select relevant columns
ensemble_subset = ensemble[, c('Ensemble_number', 'Drug',
'Predicted_concentration')]
# Append the dataframe to the combined dataframe
stacked_ensembles = rbind(stacked_ensembles, ensemble_subset)
}
stacked_ensembles_lessthan4 = stacked_ensembles %>%
filter(Ensemble_number <= 10) %>%
filter(Predicted_concentration < 4)
# sum up concentrations less than 4 ug/L
stacked_ensembles_lessthan4 = aggregate(stacked_ensembles_lessthan4$Predicted_concentration,
list(stacked_ensembles_lessthan4$Ensemble_number),
FUN=sum)
stacked_ensembles_lessthan4 = stacked_ensembles_lessthan4 %>%
mutate(Drug = "Others") %>%
relocate(Drug, .after=Group.1)
colnames(stacked_ensembles_lessthan4) = c("Ensemble_number","Drug",
"Predicted_concentration")
# get all pharmaceuticals over 10 ensembles with concentration >= 4 ug/L
stacked_ensembles_greaterthan4 = stacked_ensembles %>%
filter(Ensemble_number <= 10) %>%
filter(Predicted_concentration >= 4)
stacked_ensembles_greaterthan4$Drug = str_to_title(stacked_ensembles_greaterthan4$Drug)
# merge sums < 4 for each ensemble with pharmaceuticals > 4 for each ensemble
stacked_ensembles_filtered = rbind(stacked_ensembles_greaterthan4,
stacked_ensembles_lessthan4)
unique(stacked_ensembles_filtered)
unique(stacked_ensembles_filtered$Drug)
